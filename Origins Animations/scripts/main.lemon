global u32 Vee_OriginsAnimations.customAnimationAddress = 0


constant array<u8> char.state.SONIC_STANDING =
{
	0x05, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba,
	0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba,
	0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba,
	0xba, 0xba, 0xba, 0xbb, 0xbc, 0xbc, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd,
	0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd,
	0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xae, 0xae, 0xae, 0xae,
	0xae, 0xae, 0xaf, 0xd9, 0xd9, 0xd9, 0xd9, 0xd9, 0xd9, 0xaf, 0xaf, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd,
	0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd,
	0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xad, 0xad, 0xad, 0xad, 0xad,
	0xad, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaf, 0xd9, 0xd9, 0xd9, 0xd9, 0xd9, 0xd9, 0xaf, 0xaf,
	0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe,
	0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe,
	0xad, 0xad, 0xad, 0xad, 0xad, 0xad, 0xae, 0xae, 0xae, 0xae, 0xae, 0xae, 0xaf, 0xd9, 0xd9, 0xd9,
	0xd9, 0xd9, 0xd9, 0xaf, 0xaf, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbd, 0xbd, 0xbe,
	0xbe, 0xbd, 0xbd, 0xbe, 0xbe, 0xbf, 0xbf, 0xbf, 0xbf, 0xc0, 0xc0, 0xc0, 0xc0, 0xbf, 0xbf, 0xbf,
	0xbf, 0xc0, 0xc0, 0xc0, 0xc0, 0xbf, 0xbf, 0xbf, 0xbf, 0xc1, 0xc1, 0xc2, 0xc2, 0xfe, 0x02
}

constant array<u8> char.state.TAILSKNUCKLES_TRANSFORMING =
{
	0x02, 0xeb, 0xeb, 0xeb, 0xeb, 0xec, 0xed, 0xec, 0xed, 0xec, 0xed, 0xec, 0xed, 0xec, 0xed, 0xfd		// Tails/Knuckles
}	

function void Standalone.drawCharacterSpriteDirect(u8 character, s16 px, s16 py, u16 animationSpriteEx, u8 flags, u8 atex, u16 renderQueue)
{
	// First ask modded scripts
	animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSpriteEx)
	base.Standalone.drawCharacterSpriteDirect(character, px, py, animationSpriteEx, flags, atex, renderQueue)
}

function bool Standalone.drawCharacterSprite(u8 character, u8 variant, s16 px, s16 py, bool asSmallGhost)
{
	u8 animationSprite = char.animation.sprite
	u16 animationSpriteEx = Standalone.getModdedAnimationSpriteEx(character, animationSprite)
	if (animationSpriteEx >= 0x100 || animationSpriteEx == animationSprite)
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost)

	u8 flags = (char.render_flags & (SPRITE_FLAG_FLIP_X | SPRITE_FLAG_FLIP_Y))
	u8 angle = 0
	u64 key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)		// First ask modded scripts
	u8 rotationMode = 0

	/* if (key != 0)
		return base.Standalone.drawCharacterSprite(character, variant, px, py, asSmallGhost) */

	bool isPlayer1 = (variant == 0)
	u32 characterAddress = isPlayer1 ? 0xffffb000 : 0xffffb04a

	// Check only needed for Tails' tails
	if (variant == 2)
	{
		// No smooth rotation in Slot Machine
		if (global.zone == 0x15)
			return false

		characterAddress = 0xffff0000 + u16[A0 + 0x30]

		// Do not render when blinking after hit
		if (u8[characterAddress + 0x34] != 0 && ((u8[characterAddress + 0x34] + 1) & 0x04) == 0)
		{
			// Prevent emulator-like rendering
			return true
		}

		// Do not render when Tails looks into the background (e.g. LBZ 2 end cutscene) and in DEZ gravity transporters
		if (u8[characterAddress + 0x22] >= 0x55 && u8[characterAddress + 0x22] <= 0x5b)
		{
			// Prevent emulator-like rendering
			return true
		}

		isPlayer1 = (characterAddress == 0xffffb000)
		character = CHARACTER_TAILS
	}

	if (level.vertical_wrap == 0xff00)
	{
		// For vertically wrapping levels, "normalize" py into interval [-move_area.bottom.target * 3/4, -move_area.bottom.target * 1/4]
		py &= level.height.bitmask
		if (py > move_area.bottom.target * 3/4 && move_area.bottom.target >= 0xe0)	// move_area.bottom.target is very low in DEZ boss act
			py -= move_area.bottom.target
	}

	if (variant < 2)
	{
		if (character == CHARACTER_SONIC && animationSpriteEx == animationSprite)	// Last check is only false if modded scripts made their own changes
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (char.state == char.state.SONIC_DROPDASH)
			{
				animationSpriteEx = CHAR_ANIMSPRITE_SONIC_DROPDASH + ((level.framecounter >> 1) & 0x01)
			}
			else if (!super.active && animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				if (sonic.fastrunanim.timer > 0)
				{
					animationSpriteEx = CHAR_ANIMSPRITE_SONIC_PEELOUT + (level.framecounter & 0x03)

					if (!Game.getSetting(SETTING_SMOOTH_ROTATION))
					{
						angle = (animationSprite - 0x21) / 4 * 0xe0
						if ((char.flags & char.flag.FACING_LEFT) == (global.inv_gravity == 0))
							angle = -angle
						animationSprite = 0x21 + (animationSprite - 0x21) % 4
					}
				}
			}
		}

		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Character
			if (animationSprite >= 0x01 && animationSprite <= 0x20)
			{
				// Walking animation
				animationSprite = 0x01 + (animationSprite - 0x01) % 8
				rotationMode = 1
			}
			else if (animationSprite >= 0x21 && animationSprite <= 0x30)
			{
				// Running animation
				animationSprite = 0x21 + (animationSprite - 0x21) % 4
				rotationMode = 1
			}
			else if (animationSprite >= 0x78 && animationSprite <= 0x7f)
			{
				// Swinging animation
				animationSprite = 0x78
				rotationMode = 2
			}
			else if (character == CHARACTER_TAILS && animationSprite >= 0xc3 && animationSprite <= 0xca)
			{
				// Tails' fastest run animation
				animationSprite = 0xc3 + (animationSprite - 0xc3) % 2
				rotationMode = 1
			}
			else if (character == CHARACTER_KNUCKLES && animationSprite == 0xc0)
			{
				// Only for DDZ
				rotationMode = 1
			}

			if (rotationMode != 0)
			{
				bool useVanillaS3AIRRotation = true
				if (Game.getSetting(SETTING_SMOOTH_ROTATION) == 2)
				{
					useVanillaS3AIRRotation = (char.flags & char.flag.IN_AIR || global.zone == 0x0c)	// Use in-air rotation in DDZ
				}

				if (useVanillaS3AIRRotation)
				{
					s8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
					flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

					angle = char.rotation
					if (rotationMode == 1)
					{
						if (abs(s8(char.rotation)) <= 0x10 && abs(oldRotation) <= 0x10)
						{
							angle = 0
						}

						if (angle != char.rotation)
						{
							s8 diff = angle - oldRotation
							angle = oldRotation + clamp(diff, -3, 3)
						}
					}	
				}
				else
				{
					// Mania-accurate rotation #contributed by Elsie The Pict
					u8 oldRotation = isPlayer1 ? oldRotationPlayer1 : oldRotationPlayer2
					flags = char.flags & char.flag.FACING_LEFT		// This really has to be "char.flags", not "char.render_flags"

					angle = char.rotation
					if (rotationMode == 1)
					{
						
						if (char.rotation <= 0x04 || char.rotation >= 0xfc)
						{
							oldRotation = 0
						}
						else
						{
							u32 targetRotation = 0
							if (char.rotation > 0x10 && char.rotation < 0xe8)
								targetRotation = char.rotation
								
							u32 rotate = targetRotation - oldRotation
							u32 shift = (abs(char.groundspeed) <= 0x6000) + 1
							
							if (abs(rotate) >= abs(rotate - 0x100))
							{
								if (abs(rotate - 0x200) < abs(rotate + 0x100))
									oldRotation += (rotate - 0x100) >> shift
								else
									oldRotation += (rotate + 0x100) >> shift
							}
							else
							{
								if (abs(rotate) < abs(rotate + 0x100))
									oldRotation += rotate >> shift
								else
									oldRotation += (rotate + 0x100) >> shift
							}
						}
						
						angle = oldRotation & 0xff
					}
				}
			}

			if (isPlayer1)
				oldRotationPlayer1 = angle
			else
				oldRotationPlayer2 = angle
		}

		if (key == 0 && animationSpriteEx >= 0x100)
		{
			// Special handling for Drop Dash & Super Peel-Out
			if (animationSpriteEx >= CHAR_ANIMSPRITE_SONIC_PEELOUT)
			{
				key = stringformat("sonic_peelout_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_PEELOUT)
			}
			else
			{
				key = stringformat("sonic_dropdash_%d", animationSpriteEx - CHAR_ANIMSPRITE_SONIC_DROPDASH)
			}
		}
		if (isPlayer1)
			timeattack.animSpriteEx = animationSpriteEx

		if (key == 0)
		{
			if (animationSpriteEx < 0x100)
				animationSprite = animationSpriteEx		// Allows calling basegame sprites to be drawn without a modded key, but throws an error with undefined IDs.... this one line is the reason for this whole function being copied over
			key = stringformat(stringformat("%s_0x%02x", getCharacterSpriteKey(character)), animationSprite)

			if (!Renderer.hasCustomSprite(key))
			{
				u32 sourceBase    = (character == CHARACTER_SONIC) ? ((animationSprite >= 0xda) ? 0x140060 : 0x100000) : (character == CHARACTER_TAILS) ? ((animationSprite >= 0xd1) ? 0x143d00 : 0x3200e0) : 0x1200e0
				u32 tableAddress  = (character == CHARACTER_SONIC) ? (super.active ? 0x148378 : 0x148182) : (character == CHARACTER_TAILS) ? 0x14a08a : 0x14bd0a
				u32 mappingOffset = (character == CHARACTER_SONIC) ? (super.active ? 0x146816 : 0x146620) : (character == CHARACTER_TAILS) ? 0x148eb8 : 0x14a8d6		// Not really necessary here, we could also use "char.mapping_offset"

				key = Renderer.setupCustomCharacterSprite(sourceBase, tableAddress, mappingOffset, animationSprite, 0x00)
			}
		}
	}
	else
	{
		if (Game.getSetting(SETTING_SMOOTH_ROTATION))
		{
			// Tails' tails
			if (animationSprite >= 0x05 && animationSprite <= 0x14)
			{
				animationSprite = 0x05 + (animationSprite - 0x05) % 4
				angle = lookupAngleByVector(s16[characterAddress + 0x18], s16[characterAddress + 0x1a])

				flags = 0
				if (char.flags & char.flag.FACING_LEFT)
				{
					flags |= SPRITE_FLAG_FLIP_X
					angle += 0x80
				}
				if (global.inv_gravity)
				{
					flags ^= SPRITE_FLAG_FLIP_Y
					angle = -angle
				}
			}
		}
		if (animationSpriteEx < 0x100)
			animationSprite = animationSpriteEx		// Allows explicitly calling basegame sprites to be drawn without a modded key, but throws an error with undefined IDs
		key = stringformat(stringformat("%s_tails_0x%02x", getCharacterSpriteKey(CHARACTER_TAILS)), animationSprite)

		if (!Renderer.hasCustomSprite(key))
		{
			key = Renderer.setupCustomCharacterSprite(0x336620, 0x344d74, 0x344bb8, animationSprite, 0x00)
		}
	}

	u16 renderQueue = 0xa000 - char.sprite_priority
	u8 atex = (char.sprite_attributes >> 9) & 0x30
	if (EXTENDED_CHARACTER_PALETTES)
		atex = 0x40 + character * 0x20

	if (char.sprite_attributes & sprite_attribute.PRIORITY)
		flags |= SPRITE_FLAG_PRIO

	if (rotationMode != 0 && global.inv_gravity)
	{
		// Correction for inverse gravity
		angle = 128 - angle
		flags ^= SPRITE_FLAG_FLIP_X
	}

	if (ROMDataAnalyser.isEnabled())
	{
		string category = (variant < 2) ? getCharacterSpriteKey(character) : stringformat("%s_tails", getCharacterSpriteKey(CHARACTER_TAILS))
		Renderer.extractCustomSprite(key, category, animationSprite, atex)
	}

	// Render character
	if (asSmallGhost)
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags | SPRITE_FLAG_PRIO, 0xa800, angle, 0xc0ffffff, 0x8000)
	}
	else
	{
		Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, angle, 255)
	}

	bool useAfterImages
	if (isPlayer1)
	{
		if ((super.active == 0xff) || (super.active.tails == 0xff))
		{
			useAfterImages = true
		}
		else
		{
			if (Game.getSetting(SETTING_SPEEDUP_AFTERIMGS))
			{
				useAfterImages = ((u8[characterAddress + 0x2b] & char.bonus.SPEED_UP) != 0)
			}
		}
	}

	if (useAfterImages)
	{
		// Additional offset for Sonic charging a Super Peel-Out (either Hyper Sonic or with Speed Shoes)
		s16 afterImagesOffsetX = 0
		if (char.character == CHARACTER_SONIC && char.spindash == 0x80)
		{
			afterImagesOffsetX = (char.groundspeed >> 7) * ((char.flags & char.flag.FACING_LEFT) ? 1 : -1)
		}

		for (s8 i = 3; i > 0; --i)
		{
			A1 = 0xffffe500 + u8(posbackup.offset.player1 - (i * 8 + 4))
			s16 px0 = u16[A1] - camera.foreground.x.u16 + (i * afterImagesOffsetX / 4)
			s16 py0 = u16[A1+2] - camera.foreground.y.u16
			if (level.vertical_wrap == 0xff00)	// Consider vertical level wrap
				py0 &= level.height.bitmask

			Renderer.setSpriteTagWithPosition(characterAddress + 0x10 + i, px0, py0)
			Renderer.drawCustomSprite(key, px0, py0, atex, flags, renderQueue - i, angle, 192 - i * 32)
		}
	}

	// Prevent emulator-like rendering
	return true
}

function u16 Standalone.getModdedAnimationSpriteEx(u8 character, u8 animationSprite)
{
	u16 animationSpriteEx = animationSprite
	u32 char.object_standing_on.update_address = u32[0xffff0000 + char.object_standing_on]
	u8 input_state = (character == CHARACTER_TAILS) ? control.tails.state : control.player1.state		// Get player input

	{
		// Character-specific animations
		if (character == CHARACTER_KNUCKLES && char.state == char.state.KNUX_FLYCLIMB && animationSpriteEx == 0xc4 && ((char.render_flags & render_flag.FLIP_X) == 0))		// Knuckles gliding left
			char.render_flags |= render_flag.FLIP_X
	}

	if ((char.control_flags & 0x02) == 0)
		return animationSpriteEx
if (u8[0xffffE654] == 0)
{
	if (animationSpriteEx == 0xe5 || animationSpriteEx == 0xe9)				// Hanging frames
	{
			if (character == CHARACTER_TAILS && !(char.flags & char.flag.FACING_LEFT) && char.state != char.state.HANGING)
				char.state = char.state.HANGING

			u8 anim_timer = 4*2	// Amount of delay between frames
			u8 anim_length = 2	// Amount of frames in animation

			if (char.animation.timer <= 0 || char.animation.timer > anim_timer)
			{
				if (char.position.y.frac > char.position.y.u16)		// Going up
					char.animation.frame = (char.animation.frame < anim_length) ? (char.animation.frame + 1) : anim_length		// Advance through animation and loop at appropriate point
				else if (char.position.y.frac < char.position.y.u16)		// Going down
					char.animation.frame = (char.animation.frame > 0) ? (char.animation.frame - 1) : 0		// Advance through animation and loop at appropriate point

				char.position.y.frac = char.position.y.u16
				char.animation.timer = anim_timer
			}
			else
			{
				char.animation.timer--		// Advance animation timer
			}

			if (animationSpriteEx == 0xe5)		// Hanging frames
				return 0x90 + char.animation.frame
			
		}
		/* else
		{
			if (char.animation.frame != 0)
				char.animation.frame = 0
			if (char.animation.timer != 0)
				char.animation.timer = 0
		} */
	else if (Vee_OriginsAnimations.customAnimationAddress != 0)		// 3D standing frames
	/* else if (animationSpriteEx >= 0x55 && (animationSpriteEx <= ((char.render_flags & render_flag.FLIP_X) ? 0x5b+7 : 0x5b))) */
	{
		u8 state = (input_state & CONTROL_UP) ? 1 : (input_state & CONTROL_DOWN) ? 2 : 0
		if (char.object_standing_on.update_address == 0x026ab2 /* || char.object_standing_on.update_address == 0x029d4a */)
		{
			if (global.inv_gravity)
				state = (char.position.y.frac < char.position.y.u16) ? 1 : 0
			else
				state = (char.position.y.frac > char.position.y.u16) ? 1 : 0
			/* char.position.y.frac = char.position.y.u16 */
		}

		if (char.object_standing_on.update_address == 0x048c16 && (char.control_flags & 0x02))
		{
			state = 1
		}

		if (state != 0)
		{
			u8 anim_timer = 6*2	// Amount of delay between frames
			u8 anim_length = 1	// Amount of frames in animation
			u8 anim_loop = 1	// Loop point of animation

			char.animation.timer = (char.animation.timer <= 0 || char.animation.timer > anim_timer) ? anim_timer : (char.animation.timer - 1)		// Advance animation timer

			if (char.animation.timer <= 0 || char.animation.timer > anim_timer)
			{
				char.animation.frame = (char.animation.frame >= anim_length) ? anim_loop : (char.animation.frame + 1)		// Advance through animation and loop at appropriate point
			}

			if ((char.render_flags & render_flag.FLIP_X))
			{
				animationSpriteEx += 7
				char.render_flags &= ~render_flag.FLIP_X
			}
			return animationSpriteEx
		}
		else
		{
			if (char.animation.frame != 0)
				char.animation.frame = 0
			if (char.animation.timer != 0)
				char.animation.timer = 0
			if (Vee_OriginsAnimations.customAnimationAddress != 0)
				Vee_OriginsAnimations.customAnimationAddress = 0
		}
	}
	else if (u32[0xffff0000 + char.object_standing_on] == 0x034c54)			// Standing on MGZ top
	{
		if (u8[0xffff0000 + char.object_standing_on + 0x35] == 2)		// Going through the spinny
		{
			constant array<u8> Turning3D =		// List of frames in animation, using indexes from the basegame table
			{
				0xef, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf4, 0xf3, 0xf2, 0xf1, 0xf0
			}
			u8 anim_length = Turning3D.length()	// Amount of frames in animation
			u8 anim_timer = (abs(char.velocity.x) > 0x800) ? 2 : 4	// Amount of delay between frames

			if (char.state.former != char.state.RUNNING2)
			{
				char.state = char.state.RUNNING2
			}
			else if ((char.control_flags & 0x02) == 0)
			{
				char.control_flags |= 0x02
				char.animation.frame = 0
				char.animation.timer = 3
			}
			else
			{
				if ((char.animation.frame == 5) || (char.animation.frame == 11))
				{
					anim_timer = (abs(char.velocity.x) > 0x800) ? 5 : 6
				}

				if (char.animation.timer <= 0 /* || char.animation.timer > anim_timer */)
				{
					char.animation.frame = (char.animation.frame + 1) % anim_length		// Advance through animation and loop at appropriate point
					char.animation.timer = anim_timer
				}
				else
				{
					char.animation.timer--		// Advance animation timer
				}

				animationSpriteEx = Turning3D[char.animation.frame]
				return animationSpriteEx
			}
		}
		else
		{
			if (char.control_flags & 0x02)
				char.control_flags &= ~0x02
		}
	}
}

	return base.Standalone.getModdedAnimationSpriteEx(character, animationSprite)
}

function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSpriteEx)
{
	string key = ""
	u32 char.object_standing_on.update_address = u32[0xffff0000 + char.object_standing_on]
	u8 input_state = (character == CHARACTER_TAILS) ? control.tails.state : control.player1.state		// Get player input
  if (u8[0xffffE654] == 0)
	{
		// Character-specific animations
		if ((character == CHARACTER_TAILS && char.state == char.state.TAILS_TRANSFORM) || (character == CHARACTER_KNUCKLES && char.state == char.state.TRANSFORMING))
		{
			// Super transformation animation for Tails and Knuckles
			if (char.animation.frame < 2)
			{
				// Draw a unique sprite for the first few frames
				key = stringformat("%s_transform_0", getCharacterSpriteKey(character))
				if (!Renderer.hasCustomSprite(key))
					key = stringformat("%s_3dcrouch_1_2", getCharacterSpriteKey(character))
				return key
			}
		}

		if (character == CHARACTER_SONIC)
		{
			if (char.state == char.state.SONIC_DROPDASH)		// Sonic's Drop Dash animation
			{
				u8 anim_speed = 1
				u8 anim_frames = 15

				key = stringformat("%s_dropdash_%d", getCharacterSpriteKey(CHARACTER_SONIC), (level.framecounter >> anim_speed) & anim_frames)
			}
		}
		else if (character == CHARACTER_KNUCKLES)
		{
			if (char.state == char.state.KNUX_FLYCLIMB)			// Knuckles' gliding animation
			{
				if (animationSpriteEx == 0xc0 /* || animationSpriteEx == 0xc4 */)		// Straight gliding frames
				{
					u8 anim_speed = 2
					u8 anim_frames = 1

					key = stringformat("%s_glide_%d", getCharacterSpriteKey(CHARACTER_KNUCKLES), ((level.framecounter >> anim_speed) & anim_frames))
				}
			}
			else if (char.state == char.state.GOT_HURT_PANIC || char.state == char.state.FALLING_PANIC)
			{
				u8 anim_speed = 3
				u8 anim_frames = 1

				key = stringformat((char.state == char.state.GOT_HURT_PANIC) ? "%s_got_hurt_panic_%d" : "%s_falling_panic_%d", getCharacterSpriteKey(CHARACTER_KNUCKLES), ((level.framecounter >> anim_speed) & anim_frames))
			}
			else if (char.state != char.state.GOT_HURT)
			{
				key = stringformat((animationSpriteEx == 0x8d) ? "%s_falling_panic_1" : (animationSpriteEx == 0x8c) ? "%s_falling_panic_0" : 0, getCharacterSpriteKey(CHARACTER_KNUCKLES))
			}
		}

		if (Renderer.hasCustomSprite(key))
			return key
	}

	if ((char.control_flags & 0x02) == 0)
		return key

	if (/* animationSpriteEx == 0xe5 || */ animationSpriteEx == 0xe9)		// Hanging frames
	{
		if ((input_state & CONTROL_ABC) == 0)
		{
			if (/* character == CHARACTER_TAILS && */ !(char.flags & char.flag.FACING_LEFT) && char.state != char.state.HANGING)
				char.state = char.state.HANGING

			/* if (animationSpriteEx == 0xe5)
				key = stringformat("%s_hangingF_%d", getCharacterSpriteKey(character))
			else */ if (animationSpriteEx == 0xe9)
				key = stringformat("%s_hangingB_%d", getCharacterSpriteKey(character))

			key = stringformat(key, char.animation.frame)
		}
	}
	else if (Vee_OriginsAnimations.customAnimationAddress != 0)		// 3D standing frames
	/* else if (animationSpriteEx >= 0x55 && (animationSpriteEx <= ((char.render_flags & render_flag.FLIP_X) ? 0x5b+7 : 0x5b))) */
	{
		u8 state = (input_state & CONTROL_UP) ? 1 : (input_state & CONTROL_DOWN) ? 2 : 0
		if (char.object_standing_on.update_address == 0x026ab2 /* || char.object_standing_on.update_address == 0x029d4a */)
		{
			if (global.inv_gravity)
				state = (char.position.y.frac < char.position.y.u16) ? 1 : 0
			else
				state = (char.position.y.frac > char.position.y.u16) ? 1 : 0
			char.position.y.frac = char.position.y.u16
		}

		if (char.object_standing_on.update_address == 0x048c16 && (char.control_flags & 0x02))
		{
			state = 1
		}

		if (state != 0)
		{
			if (state == 2)
				key = stringformat("%s_3dcrouch_%d_%d", getCharacterSpriteKey(character))
			else if (state == 1)
				key = stringformat("%s_3dlookup_%d_%d", getCharacterSpriteKey(character))

			key = stringformat(key, char.animation.frame, animationSpriteEx - 0x55)
		}
	}

	if (Renderer.hasCustomSprite(key))
		return key
	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}

//# address-hook(0x012600) end(0x01286c)
//# translated(0x012a2a) end(0x012a6e)
function void UpdateSonicAnimation()
{
	if ((char.state != char.state.STANDING) || super.active || u8[0xffffE654] >= 0)
	{
		base.UpdateSonicAnimation()
		return
	}
	
	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}

	D0.u8 = char.state.SONIC_STANDING[0]

	// D0.u8 is either:
	//  - 0xff when running
	//  - 0xfe when rolling (on ground or in air)
	//  - between 0x00 and 0x7f in other cases (like standing, balancing, spring-jumping, getting hurt, etc.)

	/* if (D0.u8 < 0x80) */
	{
		D1.u8 = char.flags & char.flag.FACING_LEFT
		char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

		--char.animation.timer
		if (s8(char.animation.timer) < 0)
		{
			char.animation.timer = D0.u8
			D0.u8 = char.state.SONIC_STANDING[char.animation.frame + 1]	// Load next animation frame byte

			if (D0.u8 == 0xff)
			{
				// Loop animation from the start
				char.animation.frame = 1
				char.animation.sprite = char.state.SONIC_STANDING[1]
			}
			else if (D0.u8 == 0xfe)
			{
				// Loop animation from specific frame
				u8 diff = char.state.SONIC_STANDING[char.animation.frame + 2]
				char.animation.frame -= diff
				char.animation.sprite = char.state.SONIC_STANDING[char.animation.frame + 1]
				++char.animation.frame
			}
			else if (D0.u8 == 0xfd)
			{
				// Change to another animation
				char.state = char.state.SONIC_STANDING[char.animation.frame + 2]
			}
			/* else if (D0.u8 == 0xfc)
			{
				char.base_state += 2
			}
			else if (D0.u8 == 0xfb)
			{
				char.animation.frame = 1
				u8[A0 + 0x25] = 0
			}
			else if (D0.u8 == 0xfa)
			{
				u8[A0 + 0x25] += 2
			} */
			else
			{
				// Advance to next frame
				char.animation.sprite = D0.u8
				++char.animation.frame
			}
		}
	}
}

//# address-hook(0x015868)
function void UpdateTailsAnimation_inner()
{
	if ((char.state != char.state.TAILS_TRANSFORM) || u8[0xffffE654] >= 0)
	{
		base.UpdateTailsAnimation_inner()
		return
	}

	UpdateTailsKnucklesAnimation_transform()
}

//# address-hook(0x017d30) end(0x017ef0)
function void UpdateKnucklesAnimation()
{
	if ((char.state != char.state.TRANSFORMING) || u8[0xffffE654] >= 0)
	{
		base.UpdateKnucklesAnimation()
		return
	}

	UpdateTailsKnucklesAnimation_transform()
}

function void UpdateTailsKnucklesAnimation_transform()
{
	if (char.state != char.state.former)
	{
		char.state.former = char.state
		char.animation.frame = 0
		char.animation.timer = 0
		char.flags &= ~char.flag.PUSHING
	}

	D0.u8 = char.state.TAILSKNUCKLES_TRANSFORMING[0]

	// D0.u8 is either:
	//  - 0xff when running
	//  - 0xfe when rolling (on ground or in air)
	//  - between 0x00 and 0x7f in other cases (like standing, balancing, spring-jumping, getting hurt, etc.)

	/* if (D0.u8 < 0x80) */
	{
		D1.u8 = char.flags & char.flag.FACING_LEFT
		char.render_flags = (char.render_flags & ~(render_flag.FLIP_X | render_flag.FLIP_Y)) | D1.u8

		--char.animation.timer
		if (s8(char.animation.timer) < 0)
		{
			char.animation.timer = D0.u8
			D0.u8 = char.state.TAILSKNUCKLES_TRANSFORMING[char.animation.frame + 1]	// Load next animation frame byte

			if (D0.u8 == 0xff)
			{
				// Loop animation from the start
				char.animation.frame = 1
				char.animation.sprite = char.state.TAILSKNUCKLES_TRANSFORMING[1]
			}
			else if (D0.u8 == 0xfe)
			{
				// Loop animation from specific frame
				u8 diff = char.state.TAILSKNUCKLES_TRANSFORMING[char.animation.frame + 2]
				char.animation.frame -= diff
				char.animation.sprite = char.state.TAILSKNUCKLES_TRANSFORMING[char.animation.frame + 1]
				++char.animation.frame
			}
			else if (D0.u8 == 0xfd)
			{
				// Change to another animation
				char.state = char.state.TAILSKNUCKLES_TRANSFORMING[char.animation.frame + 2]
			}
			/* else if (D0.u8 == 0xfc)
			{
				char.base_state += 2
			}
			else if (D0.u8 == 0xfb)
			{
				char.animation.frame = 1
				u8[A0 + 0x25] = 0
			}
			else if (D0.u8 == 0xfa)
			{
				u8[A0 + 0x25] += 2
			} */
			else
			{
				// Advance to next frame
				char.animation.sprite = D0.u8
				++char.animation.frame
			}
		}
	}
 }

//# address-hook(0x034fbc) end(0x03518e)
function void fn034fbc()
{
	if ((objA1.render_flags & render_flag.VISIBLE) && u8[A1 + 0x05] < 0x04 && debug_mode.state == 0)
	{
		// Check if jump button pressed
		if (D5.u16 & CONTROL_ABC)
			u8[A1 + 0x2e] &= ~0x02
	}

	base.fn034fbc()
}

//# address-hook(0x0453e6) end(0x045526)
function void fn0453e6()
{
	D1 = ((u8[A1 + 0x38] == CHARACTER_TAILS) && (u8[A1 + 0x2a] & char.flag.FACING_LEFT)) ? 0x11 : 0x14
	base.fn0453e6()
}

// Part of transition to DEZ 2

//# address-hook(0x07eeee) end(0x07ef28)
function void fn07eeee()
{
	base.fn07eeee()
	Vee_OriginsAnimations.customAnimationAddress = 0x07ef2e
}

// HCZ/CNZ/LBZ rotation objects

//# address-hook(0x032610) end(0x03263c)
function void fn032610()
{
	base.fn032610()
	Vee_OriginsAnimations.customAnimationAddress = 0x03263e
}

// LBZ rotating elevator

//# address-hook(0x02a106) end(0x02a216)
function void fn02a106()
{
	base.fn02a106()
	/* if (u8[A2] != 0)
		Vee_OriginsAnimations.customAnimationAddress = 0x02a218
	else if (Vee_OriginsAnimations.customAnimationAddress != 0)
		Vee_OriginsAnimations.customAnimationAddress = 0 */
}

// SSZ rotating disc

//# address-hook(0x0460a6) end(0x0460d2)
function void fn0460a6()
{
	base.fn0460a6()
	Vee_OriginsAnimations.customAnimationAddress = 0x0468c4
}

// DEZ rotating gravity transport

//# address-hook(0x048d66) end(0x048db0)
function void fn048d66()
{
	base.fn048d66()
	Vee_OriginsAnimations.customAnimationAddress = 0x048db2
}
