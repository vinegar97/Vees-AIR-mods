

//# address-hook(0x01c11e) end(0x01c236)
function void UpdateCameraPositionY()
{
	if (!competition_mode.active)
	{
		base.UpdateCameraPositionY()
		return
	}

	D0.s16 = char.position.y.u16 - u16[A1]
	if (level.vertical_wrap == 0xff00)
	{
		D0.s16 &= level.height.bitmask
	}
	if (char.flags & char.flag.ROLLING)
	{
	#if STANDALONE
		// Accounting for Tails` smaller rolling box. see: https://s3unlocked.blogspot.com/2017/12/roll-height-bugs-part-1.html
		D0.s16 -= (char.character == CHARACTER_TAILS) ? 1 : 5
	#else
		D0.s16 -= 5
	#endif
	}

#if STANDALONE
	// Prevent the infamous level wrap glitch
	if (Game.getSetting(SETTING_FIX_GLITCHES) && level.vertical_wrap == 0xff00)
	{
		if (D0.s16 > level.height.bitmask / 2)
		{
			D0.s16 -= level.height.bitmask
		}
	}
#endif

	D1 = D3.u16
	if (competition_mode.active && competition_mode.multiplay)
		D1.u16 >>= 1

	if (char.flags & char.flag.IN_AIR)
	{
		D0.s16 += 0x20 - D1.u16
		if (D0.s16 < 0)
		{
			D1.u16 = 0x1800
		}
		else
		{
			D0.u16 -= 0x40
			if (D0.s16 >= 0)
			{
				D1.u16 = 0x1800
			}
			else if (u8[0xffffee32] != 0)
			{
				u8[0xffffee32] = 0
				D0 = 0
			}
			else
			{
				u16[A4] = 0
				return
			}
		}
	}
	else
	{
		D0.s16 -= D1.u16
		if (D0.s16 == 0)
		{
			if (u8[0xffffee32] != 0)
			{
				u8[0xffffee32] = 0
				D0 = 0
			}
			else
			{
				u16[A4] = 0
				return
			}
		}
		else
		{
		#if !STANDALONE
			// This check leads to strange camera behavior when looking up/down on (fast) vertically moving object
			//  -> For example, on the moving ice platform in ICZ 1; this can lead to a vertical wrap glitch
			//  -> I don't know yet what this check is even for...
			if (D3.u16 != 0x60)
			{
				D1.u16 = 0x200
			}
			else
		#endif
			if (u8[0xffffee39] != 0)
			{
				D1.u16 = 0x1800
			}
			else if (abs(s16[A0 + 0x1c]) >= 0x800)
			{
				D1.u16 = 0x1800
			}
			else
			{
				D1.u16 = 0x600
			}
		}
	}

	s16 threshold = (D1.u16 >> 8)
	if (D0.s16 > threshold)
	{
		D1.s32 = D1.s16 << 8
		D1 += u32[A1]
		D1 = (D1 << 16) + (D1 >> 16)
	}
	else if (D0.s16 < -threshold)
	{
		D1.s32 = (-D1.s16) << 8
		D1 += u32[A1]
		D1 = (D1 << 16) + (D1 >> 16)
	}
	else
	{
		D1 = D0.u16
		D1.u16 += u16[A1]
	}

	if (D0.s16 < 0)
	{
		if (D1.s16 <= s16[A2 + 4])
		{
			if (D1.s16 <= -0x100)
			{
				D1.u16 &= level.height.bitmask
			}
			else
			{
				D1.u16 = u16[A2 + 4]
			}
		}
	}
	else
	{
		if (D1.s16 >= s16[A2 + 6])
		{
			u16 levelHeight = level.height.bitmask + 1
			D1.u16 -= levelHeight
			if (D1.s16 >= 0)
			{
				u16[A1] -= levelHeight
			}
			else
			{
				D1.u16 = u16[A2 + 6]
			}
		}
	}

	D4.u16 = u16[A1]
	D1 = (D1 << 16) + (D1 >> 16)
	D3 = D1 - u32[A1]
	D3 = (D3 >> 8) + (D3 << 24)
	u16[A4] = D3.u16
	u32[A1] = D1

	if (competition_mode.active)
	{
		D1 = (D1 << 16) + (D1 >> 16)
		D1.u16 &= level.height.bitmask
		u16[A1] = D1.u16

		/* if (!competition_mode.multiplay)
		{
			u16[A1] = clamp(u16[A1], 0, 0x120)
		} */
	}
}

