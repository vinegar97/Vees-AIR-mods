//# translated(0x000d10) end(0x000dd6)
function void HInt_000d10()
{
	if (!competition_mode.active)
	{
		base.HInt_000d10()
		return
	}

	if (u16[0xfffff644] == 0)
		return

	{
		u16[0xfffff644] = 0

		push(A5)
		push(D0)

	#if STANDALONE

		if (h_int.line < 0xdf)
		{
			// Replace both layers of plane A & B with two rects each
			Renderer.enableDefaultPlane(0, false)
			Renderer.enableDefaultPlane(1, false)
			Renderer.enableDefaultPlane(2, false)
			Renderer.enableDefaultPlane(3, false)

			if (!competition_mode.multiplay)
			{
				Renderer.setupPlane(0, 0, getScreenWidth(), getScreenHeight(), 0x00, 0, 0x1000)
				Renderer.setupPlane(0, 0, getScreenWidth(), getScreenHeight(), 0x01, 1, 0x2000)
				Renderer.setupPlane(0, 0, getScreenWidth(), getScreenHeight(), 0x10, 0, 0x3000)
				Renderer.setupPlane(0, 0, getScreenWidth(), getScreenHeight(), 0x11, 1, 0x4000)
				Renderer.setScrollOffsetV(1, 0, camera.foreground.y.u16)
				/* Renderer.setScrollOffsetV(2, 0, camera.foreground.y.u16)
				Renderer.setScrollOffsetV(3, 0, scrolloffset.y.planeA) */
			}
			else
			{
				// Upper screen
				Renderer.setupPlane(0, 0, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_UPPER, 0x00, 0, 0x1000)
				Renderer.setupPlane(0, 0, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_UPPER, 0x01, 1, 0x2000)
				Renderer.setupPlane(0, 0, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_UPPER, 0x10, 0, 0x3000)
				Renderer.setupPlane(0, 0, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_UPPER, 0x11, 1, 0x4000)
				Renderer.setScrollOffsetV(1, 0, camera.foreground.y.u16)

				// Lower screen
				u8 splitScreen2Start = getScreenHeight() - COMPMODE_VIEWPORT_HEIGHT_LOWER
				Renderer.setupPlane(0, splitScreen2Start, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_LOWER, 0x00, 2, 0x1000)
				Renderer.setupPlane(0, splitScreen2Start, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_LOWER, 0x01, 3, 0x2000)
				Renderer.setupPlane(0, splitScreen2Start, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_LOWER, 0x10, 2, 0x3000)
				Renderer.setupPlane(0, splitScreen2Start, getScreenWidth(), COMPMODE_VIEWPORT_HEIGHT_LOWER, 0x11, 3, 0x4000)
				Renderer.setScrollOffsetV(2, 0, u16[0xffffee3c])
				Renderer.setScrollOffsetV(3, 0, u16[0xffffee3a])
			}

			// Update sprite attribute data in VRAM
			// TODO: Rewrite this
			VDP.copyToVRAMbyDMA((u16[0xffffef3c] != 0) ? 0xffff7b00 : 0xffff7d80, 0xf800, 0x0280)
			u16[0xfffff640] = 0x83
		}

	#else

		while ((u16[0xc00004] & 0x04) == 0)
		{
			burnCycles(0x140)	// Just to keep things going for the emulator
		}

		VDP.Config.setActiveDisplay(false)
		VDP.setupVSRAMWrite(0)
		VDP.writeData32(u32[0xffffee3a])

		syncZ80_variantA()

		// Update sprite attribute data in VRAM
		VDP.copyToVRAMbyDMA((u16[0xffffef3c] != 0) ? 0xffff7b00 : 0xffff7d80, 0xf800, 0x0280)
		u16[0xfffff640] = 0x83

		u16[0xa11100] = 0
		while ((u16[0xc00004] & 0x04) == 0)
		{
			burnCycles(0x140)	// Just to keep things going for the emulator
		}

		VDP.Config.setActiveDisplay(true)

	#endif

		D0 = pop()
		A5 = pop()
	}
}


